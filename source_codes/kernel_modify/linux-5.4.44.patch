diff --color -uNr linux-5.4.44/arch/x86/entry/common.c linux-5.4.44_cp/arch/x86/entry/common.c
--- linux-5.4.44/arch/x86/entry/common.c	2020-06-03 14:21:39
+++ linux-5.4.44_cp/arch/x86/entry/common.c	2023-05-08 10:35:38
@@ -274,11 +274,15 @@
 	prepare_exit_to_usermode(regs);
 }
 
+void(*zz_var)(struct pt_regs *, unsigned long ts);
+EXPORT_SYMBOL(zz_var);
+
+
 #ifdef CONFIG_X86_64
 __visible void do_syscall_64(unsigned long nr, struct pt_regs *regs)
 {
 	struct thread_info *ti;
-
+	unsigned long ts = ktime_get_boottime_ns();
 	enter_from_user_mode();
 	local_irq_enable();
 	ti = current_thread_info();
@@ -290,13 +294,14 @@
 		regs->ax = sys_call_table[nr](regs);
 #ifdef CONFIG_X86_X32_ABI
 	} else if (likely((nr & __X32_SYSCALL_BIT) &&
-			  (nr & ~__X32_SYSCALL_BIT) < X32_NR_syscalls)) {
+				(nr & ~__X32_SYSCALL_BIT) < X32_NR_syscalls)) {
 		nr = array_index_nospec(nr & ~__X32_SYSCALL_BIT,
-					X32_NR_syscalls);
+								X32_NR_syscalls);
 		regs->ax = x32_sys_call_table[nr](regs);
 #endif
 	}
-
+	if(zz_var != NULL)
+			(*zz_var)(regs, ts);
 	syscall_return_slowpath(regs);
 }
 #endif
diff --color -uNr linux-5.4.44/arch/x86/mm/fault.c linux-5.4.44_cp/arch/x86/mm/fault.c
--- linux-5.4.44/arch/x86/mm/fault.c	2020-06-03 14:21:39
+++ linux-5.4.44_cp/arch/x86/mm/fault.c	2023-05-08 10:39:20
@@ -729,6 +729,7 @@
 no_context(struct pt_regs *regs, unsigned long error_code,
 	   unsigned long address, int signal, int si_code)
 {
+	int (*UB_fault_address_space)(unsigned long, struct task_struct *, unsigned long);
 	struct task_struct *tsk = current;
 	unsigned long flags;
 	int sig;
@@ -769,6 +770,34 @@
 		 * Barring that, we can do the fixup and be happy.
 		 */
 		return;
+	}
+
+	UB_fault_address_space = (void*) kallsyms_lookup_name("UB_fault_address_space");
+
+	if(UB_fault_address_space){
+		int ret = UB_fault_address_space(address, tsk, regs->r13);
+		/* 
+		* ret = 1 means UB_fault_address_space() 
+		* determins that this fault is caused by UB,
+		* (in UDS SFI calling, R13 will be the Base address)
+		* so we will handle that;
+		*/
+		if(ret==1){ 
+			/* 
+			* Return an error to UB;
+			* firstly we lookup and call UB_SFI_error_handler()
+			* it will return a fix_up function in the context
+			*/
+			unsigned long (*UB_SFI_error_handler)(int);
+			unsigned long UB_error_return;
+
+			UB_SFI_error_handler = (void*) kallsyms_lookup_name("UB_SFI_error_handler");
+			if(UB_SFI_error_handler){
+				UB_error_return = UB_SFI_error_handler(-0x200); // -0x200 means address access error;
+				regs->ip = UB_error_return;
+				return;
+			}
+		}
 	}
 
 #ifdef CONFIG_VMAP_STACK
diff --color -uNr linux-5.4.44/arch/x86/mm/pageattr.c linux-5.4.44_cp/arch/x86/mm/pageattr.c
--- linux-5.4.44/arch/x86/mm/pageattr.c	2020-06-03 14:21:39
+++ linux-5.4.44_cp/arch/x86/mm/pageattr.c	2023-05-08 10:40:08
@@ -1889,6 +1889,7 @@
 
 	return change_page_attr_clear(&addr, numpages, __pgprot(_PAGE_NX), 0);
 }
+EXPORT_SYMBOL(set_memory_x);
 
 int set_memory_nx(unsigned long addr, int numpages)
 {
